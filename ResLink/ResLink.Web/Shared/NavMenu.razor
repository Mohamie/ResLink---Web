<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">ResLink Admin</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">


        @if (HC != null)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="/home" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>

            <li class="nav-item px-3">
                <NavLink class="nav-link" href="announcements">
                    <span class="oi oi-bell" aria-hidden="true"></span> Announcements
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="events">
                    <span class="oi oi-calendar" aria-hidden="true"></span> Events
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="complaints">
                    <span class="oi oi-info" aria-hidden="true"></span> Complaints
                </NavLink>
            </li>
        }

        @if (Manager != null)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="manager/register">
                    <span class="oi oi-people" aria-hidden="true"></span> Register Students
                </NavLink>
            </li>
        }


    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public ResidenceManager Manager { get; set; }
    public HouseCommittee HC { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var account = await UserAccountRepository.GetCurrentlyLoggedAccount();
        var userRole = (UserRole)account.GetProperty("userRole");


        if (userRole.RoleId == 0)//if Manager
        {
            Manager = await UserAccountRepository.GetLoggedManager();

        }

        if (userRole.RoleId == 1)//if admin
        {
            HC = await UserAccountRepository.GetLoggedHouseCommittee();
        }
    }
}
