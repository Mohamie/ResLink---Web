@page "/auth/register"
@layout AuthLayout
@inject BackendlessService backendlessService
@inject NavigationManager navManager 

<h3 class="mt-5">Register Your Residence</h3>

<div class="row">
    <div class="col-7">
        <EditForm class="form-group" Model="@residenceViewModel" OnValidSubmit="RegisterResidence">
            <DataAnnotationsValidator/>
     

            <RadzenCard>
                <label>Residence Name</label>
                <InputText class="form-control my-2" @bind-Value="residenceViewModel.ResidenceName" />
                <ValidationMessage For="(() => residenceViewModel.ResidenceName)" />

                <label>Residence Gender</label>
                <RadzenDropDown class="form-control my-2" Data="residenceViewModel.ResidenceGender" TValue="Gender" ValueProperty="Gender" TextProperty="GenderName" AllowClear="false" @bind-Value="residenceViewModel.Gender"/>
    
                <label>Manager First Name</label>
                <InputText class="form-control my-2" @bind-Value="residenceViewModel.ManagerFirstName" />
                <ValidationMessage For="(() => residenceViewModel.ManagerFirstName)" />

                <label>Manager Last Name</label>
                <InputText class="form-control my-2" @bind-Value="residenceViewModel.ManagerLastName" />
                <ValidationMessage For="(() => residenceViewModel.ManagerLastName)" />

                <label>Role</label>
                <InputText disabled class="custom-select my-2" @bind-Value="@managerRoleId" />


                <label>Manager Email</label>
                <InputText class="form-control my-2" type="email" @bind-Value="residenceViewModel.Email" />
                <ValidationMessage For="(() => residenceViewModel.Email)" />

                <label>Password</label>
                <InputText class="form-control my-2" type="password" @bind-Value="residenceViewModel.Password" />
                <ValidationMessage For="(() => residenceViewModel.Password)" />

                <label>Confirm Password</label>
                <InputText class="form-control my-2" type="password" @bind-Value="residenceViewModel.ConfirmPassword" />
                <ValidationMessage For="(() => residenceViewModel.ConfirmPassword)" />


                <RadzenButton class="my-2" Text="Register" Icon="note_add" ButtonStyle="Radzen.ButtonStyle.Success" ButtonType="ButtonType.Submit" />

            </RadzenCard>

        </EditForm>

    </div>
    <div class="col-5">
        <RadzenLink class="text-primary" href="/auth/login" Text="Back To Login"/>
    </div>
</div>

    

@code {

    ResidenceViewModel residenceViewModel = new ResidenceViewModel();
    string managerRoleId = StudentRoleViewModel.Manager.ToString();

    protected override async Task OnInitializedAsync()
    {
        residenceViewModel.ResidenceGender = (await GenderRepository.GetGender()).ToList();
        residenceViewModel.Gender = residenceViewModel.ResidenceGender[0];
    }

    private async Task RegisterResidence()
    {

        //Save Manager User Account Details
        BackendlessUser savedMangerAccount = await ResLinkUserRegistration.RegisterUserAccount(residenceViewModel.Email, residenceViewModel.Password, 1);


        //check if user was successfully created
        if(savedMangerAccount != null)
        {
            //Save ResidenceManger to db
            ResidenceManager residenceManager = new ResidenceManager();

            residenceManager.ManagerFirstName = residenceViewModel.ManagerFirstName;
            residenceManager.ManagerLastName = residenceViewModel.ManagerLastName;

            residenceManager = await ResidenceManagerRepository.SaveResidenceManager(residenceManager);

            if(residenceManager != null)
            {

                try
                {
                    //relationship between ResidenceManager and ManagerAccount, meant to log SuperUser
                    object[] managerChild = new Object[] { savedMangerAccount };
                    await ResidenceManagerRepository.SetRelation(residenceManager, "managerAccount", managerChild);


                    //since Manager will be saved in db, create a residence to link a manager to
                    Residence newResidence = new Residence();
                    newResidence.ResidenceName = residenceViewModel.ResidenceName;

                    newResidence = await ResidenceRepository.SaveResidence(newResidence);

                    //check if residence was successfully inserted
                    if (newResidence != null)
                    {
                        //relationship between Residence and Gender, gender in which residence occupy
                        object[] residenceGenderChild = new object[] { residenceViewModel.Gender };
                        await ResidenceRepository.SetRelation(newResidence, "residenceGender", residenceGenderChild);

                        //relationship between Residence and Manager, residence has a manager
                        object[] resManagerChild = new object[] { residenceManager };
                        await ResidenceRepository.SetRelation(newResidence, "residenceManager", resManagerChild);

                        //finally create a relationship between ManagerAccount and residence
                        object[] resEnrolled = new object[] { newResidence };
                        await UserAccountRepository.SetRelation(savedMangerAccount, "residence", resEnrolled);

                        //clear fields
                        residenceViewModel = null;
                        //navigate to login page
                        navManager.NavigateTo("/auth/login");
                    }

                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
                }
            }


        }

    }

}
