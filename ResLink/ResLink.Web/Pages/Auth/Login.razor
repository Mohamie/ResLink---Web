@page "/"
@layout AuthLayout
@inject BackendlessService backendlessService
@inject NavigationManager navManager
@inject NotificationService NotificationService 


<h1 class="text-muted text-center display-2">Welcome To ResLink</h1>
<h1 class="text-muted text-center">Login To Account</h1>

<div class="row mt-5">
    <div class="col-7 mx-auto">
        <EditForm Model="@user" OnValidSubmit="LoginUser">
            <RadzenCard>
                <RadzenLabel Text="Email"/>
                <RadzenTextBox @bind-Value="user.Email" class="my-2"/>
                
                <RadzenLabel Text="Password"/>
                <RadzenPassword @bind-Value="user.Password"  class="my-2"/>

                <RadzenButton class="my-2" Text="Login" Disabled="isLoading" ButtonStyle="Radzen.ButtonStyle.Success" ButtonType="ButtonType.Submit"/>

            </RadzenCard>

        </EditForm>
        <h4 class="text-muted text-info my-2">Registered Your Res Yet? <span><a href="/auth/register">Click To Register</a></span></h4>
    </div>
</div>

@code 
{
    bool isLoading = false;

    public class User
    {
        [Required]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }

    }

    User user = new User();

    private async Task LoginUser()
    {
        BackendlessUser backendlessUser = null;
        try
        {
            isLoading = true;

            //check userRole


            backendlessUser = await ResLinkUserLogin.LoginUser(user.Email, user.Password);

            if (backendlessUser != null)
            {


                var account = await UserAccountRepository.GetCurrentlyLoggedAccount();
                var userRole = (UserRole)account.GetProperty("userRole");


                if (userRole.RoleId == 0)//if Manager
                {
                    navManager.NavigateTo("/manager/register");

                    return;
                }

                if (userRole.RoleId == 1)//if admin
                {
                    navManager.NavigateTo("/home");
                }
            }
        }
        catch (Exception e)
        {
            isLoading = false;

            NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Info,
                Summary = "Error",
                Detail = e.Message,
                Duration = 4000 };

            NotificationService.Notify(message);
        }


    }
}
