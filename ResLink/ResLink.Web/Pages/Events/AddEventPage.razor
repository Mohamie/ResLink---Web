@inject DialogService DialogService
@inject NotificationService NotificationService

<EditForm class="form-group" Model="eventView" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
    
    <DataAnnotationsValidator/>

    <div class="row" style="margin-bottom: 16px">
        <div class="col-3">
            <RadzenLabel Text="Title" />
        </div>
        <div class="col">
            <RadzenTextBox class="form-control" @bind-Value="@eventView.EventTitle" Name="EventTitle" />
            <ValidationMessage For="() => eventView.EventTitle"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-3">
            <RadzenLabel Text="Start Date" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="StartDate" @bind-Value="@eventView.StartDate" ShowTime="true" />
            
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-3">
            <RadzenLabel Text="End Time" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="EndDate" @bind-Value="@eventView.EndDate" ShowTime="true" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-3">
            <RadzenLabel Text="Event Description" />
        </div>
        <div class="col">
            <RadzenTextArea class="form-control" Style="min-height: 80px;" @bind-Value="@eventView.EventDescription" />
            <ValidationMessage For="() => eventView.EventDescription" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col-6">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Add Event" />
        </div>
        <div class="col-md-3"></div>
    </div>
</EditForm>


@code {

    EventViewModel eventView = new EventViewModel();

    [Parameter]
    public DateTime EventStartTime { get; set; }

    [Parameter]
    public DateTime EventEndTime { get; set; }

    [Parameter]
    public Event EditEvent { get; set; }


    protected override void OnParametersSet()
    {
        eventView.EventTitle = EditEvent.EventTitle;
        eventView.StartDate = EventStartTime;
        eventView.EndDate = EventEndTime;
        eventView.EventDescription = EditEvent.EventDescription;
    }


    private void OnValidSubmit()
    {
        if(!IsValidDate())
        {
            return;
        }


        DialogService.Close(eventView);
    }

    private void OnInvalidSubmit()
    {
        IsValidDate();
    }

    private bool IsValidDate()
    {
        bool isValid = true;

        if (eventView.StartDate == DateTime.MinValue || eventView.EndDate == DateTime.MinValue)
        {
            NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Date:", Detail = "Enter Start and End Date", Duration = 5000 };

            NotificationService.Notify(message);

            isValid = false;
        }

        return isValid;
    }
}
