@page "/events"
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenButton class="mb-3" Text="Add Event" Icon="add_circle_outline" Click="( () => AddNewEvent())" />

<div class="row">
    <div class="col-5">
        <RadzenScheduler @ref=@scheduler style="height: 768px;" TItem="Event" Data=@eventList StartProperty="EventStartTime" EndProperty="EventEndTime"
                         TextProperty="EventTitle" SelectedIndex="2"
                         SlotSelect=@OnSlotSelect AppointmentSelect=@OnEventSelect>
            <RadzenDayView />
            <RadzenWeekView />
            <RadzenMonthView />
        </RadzenScheduler>
    </div>
    <div class="col-7">
        <EventsList Events="eventList"/>
    </div>

</div>



@code {

    RadzenScheduler<Event> scheduler;

    Dictionary<DateTime, string> _events = new Dictionary<DateTime, string>();

    List<Event> eventList;


    protected override async Task OnInitializedAsync()
    {
        eventList = await EventRepository.GetEvents() as List<Event>;
    }


    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        await AddNewEvent(args);
    }

    async Task AddNewEvent(SchedulerSlotSelectEventArgs args = null)
    {

        DateTime date = new DateTime();

        //This should be a ViewModel
        EventViewModel eventViewModel = await DialogService.OpenAsync<AddEventPage>("Add Event",
            new Dictionary<string, object> { { "EventStartTime", (args != null) ? args.Start : date.Date }, { "EventEndTime", (args != null) ? args.End : date.Date } });

        //Todo: Extract ViewModel to Model, save data and add relationships, event category and authur of the event
        if (eventViewModel != null)
        {
            //Convert ViewModel to Model
            Event _event = new Event(); //Data Model

            _event.EventTitle = eventViewModel.EventTitle;
            _event.EventDescription = eventViewModel.EventDescription;
            _event.EventStartTime = eventViewModel.StartDate;
            _event.EventEndTime = eventViewModel.EndDate;

            //Save Model(Event) to db
            _event = await EventRepository.SaveEvent(_event);


            // check if Model was saved, if so, create a relationship between HC and Event(the authur of the event)
            if (_event != null)
            {
                object[] childObject = new object[] { await UserAccountRepository.GetLoggedHouseCommittee() };
                await EventRepository.SetRelation(_event, "hc", childObject);

                eventList = null;
                eventList = await EventRepository.GetEvents() as List<Event>;

                NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Event:", Detail = "Added Successfuly", Duration = 4000 };

                NotificationService.Notify(message);
            }





            //eventList.Add(data);

            //await EventRepository.SaveEvent(data);

            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }

    async Task OnEventSelect(SchedulerAppointmentSelectEventArgs<Event> args)
    {

        //Consider code reusability for this one

        //This should be a ViewModel
        Event editedEvent = await DialogService.OpenAsync<EditEventPage>("Edit Event", new Dictionary<string, object> { { "Event", args.Data } });

        //Todo: Extract ViewModel to Model, save data and add relationships, event category and authur of the event
        if (editedEvent != null)
        {
            await EventRepository.SaveEvent(editedEvent);
        }

        await scheduler.Reload();
    }


}
