@inject NotificationService NotificationService
@inject DialogService DialogService

<h3 class="text-muted">Events List</h3>

<RadzenGrid class="shadow m-1" AllowFiltering="true" AllowPaging="true" PageSize="10"
            AllowSorting="true" Data="@Events" TItem="Event" ColumnWidth="200px">
    <Columns>
        <RadzenGridColumn TItem="Event" Property="EventTitle" Title="Title" />
        <RadzenGridColumn TItem="Event" Property="EventDescription" Title="Description" />
        <RadzenGridColumn TItem="Event" Property="EventStartTime" Title="Date Scheduled" />
        <RadzenGridColumn TItem="Event" Property="Coordinator.Student.FullNames" Title="Coordinator" />

        <RadzenGridColumn TItem="Event" Context="_event" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">

            <Template Context="_event">

                <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="((args) => Edit(_event))" />

            </Template>

        </RadzenGridColumn>


        <RadzenGridColumn TItem="Event" Context="_event" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">

            <Template Context="_event">

                <RadzenButton Icon="visibility" Size="ButtonSize.Medium" Click="((args) => Details(_event))" />

            </Template>

        </RadzenGridColumn>

    </Columns>
</RadzenGrid>

@code {

    [Parameter]
    public List<Event> Events { get; set; }


    private async Task Details(Event _event)
    {
        await DialogService.OpenAsync<EventDetailsPage>("Event Details", new Dictionary<string, object> { { "Event", _event } });
    }

    private async Task Edit(Event _event)
    {
        EventViewModel viewModel = await DialogService.OpenAsync<AddEventPage>("Edit Event", new Dictionary<string, object> { { "EditEvent", _event}, { "EventStartTime", _event.EventStartTime }, { "EventEndTime", _event.EventEndTime} });

        if(viewModel != null)
        {
            _event.EventTitle = viewModel.EventTitle;
            _event.EventDescription = viewModel.EventDescription;
            _event.EventStartTime = viewModel.StartDate;
            _event.EventEndTime = viewModel.EndDate;

            _event = await EventRepository.SaveEvent(_event);

            if(_event != null)
            {
                Events = (await EventRepository.GetEvents()).ToList();


                NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Event:", Detail = "Updated Successfuly", Duration = 4000 };

                NotificationService.Notify(message);
            }
        }

    }
}
