@inject NotificationService NotificationService 
@inject DialogService DialogService

<h3 class="text-muted">Announcements List</h3>


<RadzenGrid class="shadow m-1" AllowFiltering="true" AllowPaging="true" PageSize="displayPages"
            AllowSorting="true" Data="@AnnouncementList" TItem="Announcement" ColumnWidth="200px">
    <Columns>
        <RadzenGridColumn Width="200px" TItem="Announcement" Property="HouseCommittee.HcRole.HcRoleName" Title="HC Role" />
        <RadzenGridColumn TItem="Announcement" Property="AnnouncementTitle" Title="Announcement Title" />
        <RadzenGridColumn Width="200px" TItem="Announcement" Property="HouseCommittee.Student.FullNames" Title="Authur Name" />
        <RadzenGridColumn TItem="Announcement" Property="DateCreated" Title="Date Announced" />

        @if (!IsDisplayOnly)
        {

            <RadzenGridColumn TItem="Announcement" Property="AnnouncementDescription" Title="Description" />

            <RadzenGridColumn TItem="Announcement" Context="announcement" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">

                <Template Context="announcement">

                    <RadzenButton Icon="edit" Size="ButtonSize.Medium" Click="(() => Edit(announcement))"/>

                </Template>

            </RadzenGridColumn>
        }


        <RadzenGridColumn TItem="Announcement" Context="announcement" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">

            <Template Context="announcement">

                <RadzenButton Icon="visibility" Size="ButtonSize.Medium" Click="((args) => Details(announcement))" />

            </Template>

        </RadzenGridColumn>

    </Columns>
</RadzenGrid>



@code {


    [Parameter]
    public List<Announcement> AnnouncementList { get; set; }

    [Parameter]
    public bool IsDisplayOnly { get; set; }

    private int displayPages = 10;



    private async Task Details(Announcement announcement)
    {
        await DialogService.OpenAsync<AnnouncementDetailsPage>("Announcement Details", new Dictionary<string, object> { { "Announcement", announcement } }, new DialogOptions() { Width = "700px", Height = "800px" });
    }

    private async Task Edit(Announcement announcement)
    {
        AnnouncementViewModel viewModel = await DialogService.OpenAsync<AddAnnouncementPage>("Edit Announcement", new Dictionary<string, object> { { "EditAnnouncement", announcement } });

        if(viewModel != null)
        {
            announcement.AnnouncementTitle = viewModel.AnnouncementTitle;
            announcement.AnnouncementDescription = viewModel.AnnouncementDescription;

            announcement = await AnnouncementRepository.SaveAnnouncement(announcement);

            if (announcement != null)
            {
                AnnouncementList = (await AnnouncementRepository.GetAnnouncements()).ToList();

                NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Announcement:", Detail = "Upadated Successfuly", Duration = 4000 };

                NotificationService.Notify(message);
            }
        }

    }

    protected override void OnParametersSet()
    {

        //Show minimized pages if True
        if (IsDisplayOnly)
        {
            displayPages = 5;
        }
    }
}
