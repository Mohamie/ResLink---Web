@page "/announcements"
@inject DialogService DialogService
@inject NotificationService NotificationService


@if(AnnouncementList != null)
{
    <RadzenButton class="my-4" Text="Add Announcement" Icon="add_circle_outline" Click="(() => AddAnnouncement())" />
    <AnnouncementsList AnnouncementList="AnnouncementList" IsDisplayOnly="false"/>

}
else
{
    <div>Loading data please wait...</div>
}



@code
{
    //Create a ViewModel for Announcements
    AnnouncementViewModel announcementViewModel;


    public List<Announcement> AnnouncementList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AnnouncementList = await AnnouncementRepository.GetAnnouncements() as List<Announcement>;
    }

    async Task AddAnnouncement()
    {
        announcementViewModel = await DialogService.OpenAsync<AddAnnouncementPage>("Add Announcement");


        //Todo: Extract data from ViewModel to Model, add relationships like category, severity and authur of the announcement
        if (announcementViewModel != null)
        {

            //Annoucement object to save to database
            Announcement announcement = new Announcement();

            announcement.AnnouncementTitle = announcementViewModel.AnnouncementTitle;
            announcement.AnnouncementDescription = announcementViewModel.AnnouncementDescription;
            announcement.DateCreated = DateTime.Now;
            var loggedAccount = (await UserAccountRepository.GetLoggedHouseCommittee()).Student.StudentAccount;

            announcement.ResidenceID = (loggedAccount.GetProperty("residence") as Residence).objectId;


            announcement = await AnnouncementRepository.SaveAnnouncement(announcement);

            //if its saved and retrived
            if(announcement != null)
            {
                object[] childObject = new object[] { await UserAccountRepository.GetLoggedHouseCommittee()};
                await AnnouncementRepository.SetRelation(announcement, "hc", childObject);


                AnnouncementList = null;
                AnnouncementList = await AnnouncementRepository.GetAnnouncements() as List<Announcement>;

                NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Announcement:", Detail = "Added Successfuly", Duration = 4000 };

                NotificationService.Notify(message);
            }


        }

    }
}
