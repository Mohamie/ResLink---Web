@page "/manager/register"
@inject DialogService DialogService

<RadzenButton Disabled="@isDataLoaded" Text="Register Admin" Icon="admin_panel_settings" Click="(() => AddUser(StudentRoleViewModel.HouseCommittee))"/>
<AdminList/>

<RadzenButton Disabled="@isDataLoaded" Text="Register Student" Icon="group_add" Click="(() => AddUser(StudentRoleViewModel.Regular))" />
<InmatesList/>


@code 
{
    StudentViewModel studentViewModel;

    public List<HCRole> HCRoles { get; set; }
    public Gender StudentGender { get; set; }
    public Residence Residence { get; set; }


    BackendlessUser currentLoggedUser;
    bool isDataLoaded = true;

    protected override async Task OnInitializedAsync()
    {
        HCRoles = (await HCRoleRepository.GetHCRoles()).ToList();

        //Get Currently Logged User
        currentLoggedUser = Backendless.UserService.CurrentUser;
        currentLoggedUser = await UserAccountRepository.GetRelations(currentLoggedUser.ObjectId);

        var res = currentLoggedUser.GetProperty("residence");

        StudentGender = (res as Residence).ResidenceGender;


        isDataLoaded = false;
    }


    private async Task AddUser(StudentRoleViewModel role)
    {

        studentViewModel = await DialogService.OpenAsync<RegisterStudentPage>("Register Student", new Dictionary<string, object> { { "Gender", StudentGender }, { "Role", role }, { "HCRoles", HCRoles } });

        if(studentViewModel != null)
        {
            try
            {
                BackendlessUser studentAccount = null;
                Student student = new Student();

                //Create Student Account using email and password
                if (role == StudentRoleViewModel.HouseCommittee)
                {
                    studentAccount = await ResLinkUserRegistration.RegisterUserAccount(studentViewModel.Email, studentViewModel.Password, 2);
                }

                if (role == StudentRoleViewModel.Regular)
                {
                    studentAccount = await ResLinkUserRegistration.RegisterUserAccount(studentViewModel.Email, studentViewModel.Password, 1);
                }


                //Save student details in student 
                student.StudentNumber = Convert.ToInt32(studentViewModel.StudentNumber);
                student.FullNames = studentViewModel.FirstNames;
                student.LastName = studentViewModel.LastName;

                student = await StudentRepository.SaveStudent(student);

                if (student != null)
                {
                    //SetRelation for studentAccount and gender

                    //set studentAccount
                    object[] studentAccountChild = new object[] { studentAccount };
                    await StudentRepository.SetRelation(student, "studentAccount", studentAccountChild);

                    //set gender
                    object[] genderChild = new object[] { studentViewModel.Gender };
                    await StudentRepository.SetRelation(student, "gender", genderChild);


                    //Set HouseCommitte
                    if (role == StudentRoleViewModel.HouseCommittee)
                    {
                        HouseCommittee houseCommittee = new HouseCommittee();

                        //save to obtain objectId
                        houseCommittee = await HouseCommitteeRepository.SaveHouseCommittee(houseCommittee);

                        //set student
                        object[] studentChild = new object[] { student };
                        await HouseCommitteeRepository.SetRelation(houseCommittee, "student", studentChild);

                        //set HCRole
                        object[] hcRoleChild = new object[] { studentViewModel.HCRole };
                        await HouseCommitteeRepository.SetRelation(houseCommittee, "hcRole", hcRoleChild);

                    }


                }

            }
            catch (Exception e)
            {

                Console.WriteLine("Error: " + e.Message);
            }
        }




    }
}
