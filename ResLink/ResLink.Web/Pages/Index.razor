@page "/home"
@inject BackendlessService backendlessService
@inject NavigationManager navManager




@if (Announcements != null && Events != null)
{
    <div class="row">
        <div class="col-md-6 col-xl-3 mb-4">
            <div class="card shadow border-left-primary py-2">
                <div class="card-body">
                    <div class="row align-items-center no-gutters">
                        <div class="col mr-2">
                            <div class="text-uppercase text-primary font-weight-bold text-xs mb-1"><span>Announcements</span></div>
                            <div class="text-dark font-weight-bold h5 mb-0"><span>@announcementsCount</span></div>
                        </div>
                        <div class="col-auto"><span class="oi oi-bell" aria-hidden="true"></span></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-xl-3 mb-4">
            <div class="card shadow border-left-success py-2">
                <div class="card-body">
                    <div class="row align-items-center no-gutters">
                        <div class="col mr-2">
                            <div class="text-uppercase text-success font-weight-bold text-xs mb-1"><span>Events </span></div>
                            <div class="text-dark font-weight-bold h5 mb-0"><span>@eventsCount</span></div>
                        </div>
                        <div class="col-auto"><span class="oi oi-calendar" aria-hidden="true"></span></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-xl-3 mb-4">
            <div class="card shadow border-left-success py-2">
                <div class="card-body">
                    <div class="row align-items-center no-gutters">
                        <div class="col mr-2">
                            <div class="text-uppercase text-success font-weight-bold text-xs mb-1"><span>Complaints</span></div>
                            <div class="text-dark font-weight-bold h5 mb-0"><span>@complaintCount</span></div>
                        </div>
                        <div class="col-auto"><span class="oi oi-audio-spectrum" aria-hidden="true"></span></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <AnnouncementsList AnnouncementList="Announcements" IsDisplayOnly="true" />
    <EventsList Events="Events" />

}
else
{
    <div>Loading data please wait....</div>
}





@code{

    int announcementsCount;
    int eventsCount;
    int complaintCount;

    public ResidenceManager Manager { get; set; }

    public HouseCommittee LoggedUser { get; set; }

    public List<Announcement> Announcements { get; set; }
    public List<Event> Events { get; set; }
    public List<Complaint> Complaints { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var account = await UserAccountRepository.GetCurrentlyLoggedAccount();
        var userRole = (UserRole)account.GetProperty("userRole");


        if (userRole.RoleId == 0)//if Manager
        {
            Manager = await UserAccountRepository.GetLoggedManager();

            navManager.NavigateTo("/manager/register");

            return;
        }

        if (userRole.RoleId == 1)//if admin
        {
            LoggedUser = await UserAccountRepository.GetLoggedHouseCommittee();

            Announcements = (await AnnouncementRepository.GetAnnouncements() as List<Announcement>).ToList();
            Events = (await EventRepository.GetEvents() as List<Event>).ToList();
            Complaints = (await ComplaintRepository.getComplaints() as List<Complaint>).ToList();

            announcementsCount = Announcements.Count;
            eventsCount = Events.Count;
            complaintCount = Complaints.Count;
        }


    }


}